{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GANS","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"f4i23AuFvYpH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"71b1c953-34e8-4efe-c761-1bb11430a3c1","executionInfo":{"status":"ok","timestamp":1548591394907,"user_tz":-330,"elapsed":2123,"user":{"displayName":"Aditya Mehndiratta","photoUrl":"","userId":"12950168247688068496"}}},"cell_type":"code","source":["import tensorflow as tf\n","from keras.datasets import cifar10\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from tqdm import tqdm\n","\n","%matplotlib inline"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"8Bu1qcGRU2Z_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":190},"outputId":"d3b7ce22-d40d-445a-b5cd-afa83b2cd84c","executionInfo":{"status":"ok","timestamp":1548592840659,"user_tz":-330,"elapsed":2091,"user":{"displayName":"Aditya Mehndiratta","photoUrl":"","userId":"12950168247688068496"}}},"cell_type":"code","source":["(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n","\n","# fuse the training set and the testing set\n","x_train = np.concatenate((x_train, x_test), axis = 0)/255\n","\n","# check some images\n","fig, axes = plt.subplots(figsize=(20, 4), nrows=1, ncols=6, sharey=True, sharex=False)\n","for i in range(6):\n","    axes[i].xaxis.set_visible(False)\n","    axes[i].yaxis.set_visible(False)\n","    im = axes[i].imshow(x_train[i])"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nhfj/qZAAAAAASUVORK5CYII=\n","text/plain":["<Figure size 1440x288 with 6 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"_PD05t0_YXZd","colab_type":"code","colab":{}},"cell_type":"code","source":["class DCGAN:\n","    \"\"\"\n","        A 4-layer generator - 4-layer discriminator Deep Convolutional Generative Adversarial Network\n","        \n","        Huperparameters and optimizers are defaulted to those describe in the paper: \n","        \n","            UNSUPERVISED REPRESENTATION LEARNING WITH DEEP CONVOLUTIONAL\n","            GENERATIVE ADVERSARIAL NETWORKS\n","            \n","            by \n","            \n","            Alec Radford & Luke Metz\n","            indico Research\n","            Boston, MA {alec,luke}@indico.io\n","            \n","            Soumith Chintala\n","            Facebook AI Research New York, NY soumith@fb.com\n","    \"\"\"\n","    \n","    def __init__(self, x_train, gen_dims=100):\n","        \"\"\"\n","            Initializes the Deep Convolutional Gan\n","            \n","            Ags:\n","                x_train (np.array): the set we want to sample generated images from\n","                gen_dims (int): dimension of the noise for the generated images\n","        \"\"\"\n","        \n","        self.training_set = x_train\n","        self.samples = []  # empty array to hold the samples\n","        self.losses = []  # empty array to hold the losses\n","        self.gen_dims = gen_dims\n","        self.weights = []\n","    \n","    def __generator(self, input_layer, kernel_size=5, reuse=False, lrelu_slope=0.2, kernel_initializer=tf.contrib.layers.xavier_initializer(), training=True):\n","        \"\"\"\n","            Builds the generator CNN\n","            \n","            Args:\n","                input_layer (Tensor): The input layer to the network - gaussian noise placeholder\n","                kernel_initializer: weight initializer for the CNN layers\n","                kernel_size (int): size of the perceptive field\n","                reuse (bool): reuse parameter to reuse the variables\n","                lrelu_slope (np.float16): slope for the leaky relu activation function\n","                training (bool): batch normalization training\n","                \n","            Returns:\n","                out (Tensor): generated image\n","        \"\"\"\n","        \n","        # use the xavier initializer for the weights\n","        w_init = kernel_initializer\n","        \n","        # use the variable scope to fetch the vars later\n","        with tf.variable_scope('generator', reuse=reuse):\n","\n","            # reshape the noise into a volume\n","            input_dense = tf.layers.dense(inputs=input_layer, units=2*2*256)\n","            input_volume = tf.reshape(tensor=input_dense, shape=(-1, 2, 2, 256))\n","            h1 = tf.layers.batch_normalization(inputs=input_volume, training=training)  # batch norm\n","            h1 = tf.maximum(h1 * lrelu_slope, h1) # leaky relu\n","            # 2x2x256\n","\n","            # deconv - upsample\n","            h2 = tf.layers.conv2d_transpose(filters=128, strides=2, kernel_size=kernel_size, padding='same', inputs=h1, activation=None, kernel_initializer=w_init)\n","            h2 = tf.layers.batch_normalization(inputs=h2, training=training)\n","            h2 = tf.maximum(h2 * lrelu_slope, h2) # leaky relu\n","            # 4x4x128\n","\n","            # deconv - upsample\n","            h3 = tf.layers.conv2d_transpose(filters=64, strides=2, kernel_size=kernel_size, padding='same', inputs=h2, activation=None, kernel_initializer=w_init)\n","            h3 = tf.layers.batch_normalization(inputs=h3, training=training)\n","            h3 = tf.maximum(h3 * lrelu_slope, h3)\n","            # 8x8x64\n","\n","            # deconv - upsample\n","            h4 = tf.layers.conv2d_transpose(filters=32, strides=2, kernel_size=kernel_size, padding='same', inputs=h3, activation=None, kernel_initializer=w_init)\n","            h4 = tf.layers.batch_normalization(inputs=h4, training=training)\n","            h4 = tf.maximum(h4 * lrelu_slope, h4)\n","            # 16x16x32\n","\n","            # deconv - upsample\n","            logits = tf.layers.conv2d_transpose(filters=3, strides=2, kernel_size=kernel_size, padding='same', inputs=h4, activation=None, kernel_initializer=w_init)\n","            # 32x32x3\n","\n","            # output image\n","            out = tf.tanh(x=logits)\n","\n","            return out\n","    \n","    def __discriminator(self, input_layer, reuse=False, lrelu_slope=0.2, kernel_initializer=tf.contrib.layers.xavier_initializer(), kernel_size=5):\n","        \"\"\"\n","            Builds the discriminator CNN\n","            \n","            Args:\n","                input_layer (Tensor): The input layer to the network - image from the training set\n","                kernel_initializer: weight initializer for the CNN layers\n","                kernel_size (int): size of the perceptive field\n","                reuse (bool): reuse parameter to reuse the variables\n","                lrelu_slope (np.float16): slope for the leaky relu activation function\n","                \n","            Returns:\n","                out (Tensor): probability that the image is generated\n","                logits (Tensor): logits of the discriminator\n","        \"\"\"\n","        \n","        # use the xavier initializer for the weights\n","        w_init = kernel_initializer\n","        \n","        with tf.variable_scope('discriminator', reuse=reuse):\n","        \n","            # conv - 32x32x3 -> 16x16x364 -- we don't use the batch norm on the first layer of discriminator\n","            h1 = tf.layers.conv2d(inputs=input_layer, filters=32, strides=2, kernel_size=kernel_size, padding='same', kernel_initializer=w_init)\n","            h1 = tf.maximum(h1 * lrelu_slope, h1)\n","\n","            # conv - 16x16x64 -> 8x8x128\n","            h2 = tf.layers.conv2d(inputs=h1, filters=64, strides=2, kernel_size=kernel_size, padding='same', kernel_initializer=w_init)\n","            h2 = tf.layers.batch_normalization(inputs=h2, training=True)\n","            h2 = tf.maximum(h2 * lrelu_slope, h2)\n","\n","            # conv - 8x8x128 -> 4x4x256\n","            h3 = tf.layers.conv2d(inputs=h2, filters=128, strides=2, kernel_size=kernel_size, padding='same', kernel_initializer=w_init)\n","            h3 = tf.layers.batch_normalization(inputs=h3, training=True)\n","            h3 = tf.maximum(h3 * lrelu_slope, h3)\n","\n","            # conv - 4x4x256 -> 2x2x512\n","            h4 = tf.layers.conv2d(inputs=h3, filters=256, strides=2, kernel_size=kernel_size, padding='same', kernel_initializer=w_init)\n","            h4 = tf.layers.batch_normalization(inputs=h4, training=True)\n","            h4 = tf.maximum(h4 * lrelu_slope, h4)\n","\n","            # flatten the array\n","            flatten = tf.reshape(tensor=h4, shape=(-1, 2*2*256))\n","\n","            # logits\n","            logits = tf.layers.dense(inputs=flatten, units=1, activation=None, kernel_initializer=w_init)\n","\n","            # output\n","            out = tf.sigmoid(x=logits)\n","\n","            return out, logits\n","    \n","    def __inputs(self):\n","        \"\"\"\n","            Creates the imput tensors for the generator and the discriminator\n","            \n","            Returns:\n","                gen_input (Tensor): input placeholder for the generator\n","                real_input (Tensor): input placeholder for the discriminator\n","        \"\"\"\n","        \n","        # define the input placeholders\n","        gen_input = tf.placeholder(shape=(None, self.gen_dims), dtype=tf.float32)\n","        real_input = tf.placeholder(shape=(None, 32, 32, 3), dtype=tf.float32)\n","        \n","        return gen_input, real_input\n","    \n","    def __setup_losses_and_optimizers(self, lr=0.0005, beta1=0.5, beta2=0.999):\n","        \"\"\"\n","            Builds the computational graph for the network\n","            \n","            Args:\n","                lr (float): learning rate for the optimizer\n","                beta1 (float): beta1 parameter for the ADAM optimizer\n","                beta2 (float): beta2 parameter for ADAM\n","            \n","            Returns:\n","                discriminator_optimizer: optimizer op for the discriminator \n","                generator_optimizer: optimizer op for the generator\n","                disc_loss: discriminator loss\n","                gen_loss: generator loss\n","                gen_input: pass through generator input - noise\n","                real_input: pass through real image input\n","        \"\"\"\n","        \n","        # - - - BUILD THE GRAPH - - -      \n","        # reset the default graph\n","        tf.reset_default_graph()\n","\n","        # define the input placeholders\n","        gen_input, real_input = self.__inputs()\n","        \n","        # build the generator\n","        gen_images = self.__generator(input_layer=gen_input, \n","                                      kernel_size=5, \n","                                      reuse=False, \n","                                      lrelu_slope=0.2, \n","                                      kernel_initializer=tf.contrib.layers.xavier_initializer(), \n","                                      training=True)\n","\n","        # build the discriminator for the real images\n","        disc_output_real_image, disc_logits_real_image = self.__discriminator(input_layer=real_input, \n","                                                                              reuse=False, \n","                                                                              lrelu_slope=0.2,\n","                                                                              kernel_initializer=tf.contrib.layers.xavier_initializer(), \n","                                                                              kernel_size=5)\n","        \n","        # build the discriminator for fake images\n","        # reuse the variables that we have from the real images\n","        disc_output_gen_image, disc_logits_gen_image = self.__discriminator(input_layer=gen_images, \n","                                                                            reuse=True, \n","                                                                            lrelu_slope=0.2, \n","                                                                            kernel_initializer=tf.contrib.layers.xavier_initializer(), \n","                                                                            kernel_size=5)\n","\n","        # - - - LOSSES - - -\n","        # generator loss\n","        gen_loss = tf.reduce_mean(tf.losses.sigmoid_cross_entropy(logits=disc_logits_gen_image, multi_class_labels=tf.ones_like(disc_logits_gen_image)))\n","        \n","        # discriminator loss\n","        disc_loss_real_images = tf.reduce_mean(tf.losses.sigmoid_cross_entropy(logits=disc_logits_real_image, multi_class_labels=tf.ones_like(disc_logits_real_image)))\n","        disc_loss_gen_images = tf.reduce_mean(tf.losses.sigmoid_cross_entropy(logits=disc_logits_gen_image, multi_class_labels=tf.zeros_like(disc_logits_gen_image)))\n","        disc_loss = disc_loss_real_images + disc_loss_gen_images\n","\n","        # get the variables for the generator and discriminator\n","        generator_variables = [var for var in tf.trainable_variables() if var.name.startswith('generator')]\n","        discriminator_variables = [var for var in tf.trainable_variables() if var.name.startswith('discriminator')]\n","\n","        # setup the optimizers\n","        # comtrol for the global sample mean and variance\n","        with tf.control_dependencies(tf.get_collection(tf.GraphKeys.UPDATE_OPS)):\n","            generator_optimizer = tf.train.AdamOptimizer(learning_rate=lr, beta1=beta1, beta2=beta2).minimize(gen_loss, var_list=generator_variables)\n","            discriminator_optimizer = tf.train.AdamOptimizer(learning_rate=lr, beta1=beta1, beta2=beta2).minimize(disc_loss, var_list=discriminator_variables)\n","        \n","        return discriminator_optimizer, generator_optimizer, disc_loss, gen_loss, gen_input, real_input\n","    \n","    def train(self, batch_size=128, epochs=100):\n","        \"\"\"\n","            Trains the DCGAN\n","            \n","            Args:\n","                batch_size (int): size of a batch\n","                epochs (int): number of epochs to train for\n","        \"\"\"\n","        \n","        d_opt, g_opt, d_loss, g_loss, gen_input, real_input = self.__setup_losses_and_optimizers()\n","        \n","        # - - - TRAIN - - -\n","        # run the session\n","        with tf.Session() as sess:\n","\n","            # initialize the variables\n","            sess.run(tf.global_variables_initializer())\n","\n","            # train the network\n","            for epoch in tqdm(range(epochs)):\n","\n","                for step, batch in enumerate(self.__next_batch(self.training_set, batch_size)):\n","                    \n","                    # generate the noise\n","                    noise = np.random.uniform(low=-1, high=1, size=(batch_size, self.gen_dims))\n","\n","                    # feed the noise through the generator\n","                    _ = sess.run(g_opt, feed_dict={gen_input: noise, real_input: batch})\n","\n","                    # feed the channel and the noise to the discriminator\n","                    _ = sess.run(d_opt, feed_dict={gen_input: noise, real_input: batch})\n","\n","                    # get the generator and discriminator losses\n","                    gen_loss, disc_loss = sess.run([g_loss, d_loss], feed_dict={gen_input: noise, real_input: batch})\n","                    \n","                    # append all the losses on every iteration\n","                    self.losses.append((gen_loss, disc_loss))\n","                \n","                # every second epoch\n","                if epoch % 2 == 0:\n","                    # sample more noise\n","                    sample_noise = np.random.uniform(low=-1, high=1, size=(72, self.gen_dims))\n","\n","                    # generate images\n","                    gen_samples = sess.run(self.__generator(gen_input, reuse=True, training=False), feed_dict={gen_input: sample_noise})\n","                    \n","                    # append the images to the samples\n","                    self.samples.append(gen_samples)\n","                    \n","                    # view samples from the last epoch\n","                    _ = self.view_samples(-1, self.samples, 6, 12, figsize=(10,5))\n","                    plt.show()\n","                \n","    def __next_batch(self, data, batch_size=128):\n","        \"\"\"\n","            Generates the batches of data\n","        \n","            Args:\n","                batch_size (int): size of the batch\n","        \n","            Returns:\n","                batch based on the batch_size\n","        \"\"\"\n","        \n","        # get the number of partitions\n","        number_of_partitions = data.shape[0]//batch_size\n","\n","        # shuffle the examples\n","        np.random.shuffle(self.training_set)\n","\n","        # partition the examples\n","        for batch in np.array_split(self.training_set[:number_of_partitions*batch_size], number_of_partitions):\n","            yield batch * 2 - 1  # scale to -1 to 1\n","    \n","    def view_samples(self, epoch, samples, nrows, ncols, figsize=(5, 5)):\n","        \"\"\"\n","            Shows generated samples\n","            The function is taken from Udacity's DL nanodegree course\n","            \n","            Args:\n","                epoch (int): the epochs to fetch the samples from \n","                nrows (int): number of rows in the grid\n","                ncols (int): number of columns in the grid\n","                figsize (int, int): figure size\n","                \n","            Returns:\n","                fig (matplotlib.figure.Figure): figure object\n","                axes (matplotlib.axes._subplots.AxesSubplot): ax objects\n","        \"\"\"\n","        \n","        # ge the figure and the axes\n","        fig, axes = plt.subplots(figsize=figsize, nrows=nrows, ncols=ncols, sharey=True, sharex=True)\n","\n","        # draw the samples\n","        for ax, img in zip(axes.flatten(), samples[epoch]):\n","            ax.axis('off')\n","            img = ((img - img.min())*255 / (img.max() - img.min())).astype(np.uint8)\n","            ax.set_adjustable('box-forced')\n","            im = ax.imshow(img, aspect='equal')\n","        plt.subplots_adjust(wspace=0, hspace=0)\n","        return fig, axes"],"execution_count":0,"outputs":[]},{"metadata":{"id":"St15UYQKZhw-","colab_type":"code","colab":{}},"cell_type":"code","source":["gan = DCGAN(x_train)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"_MSao8uvZnaJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":3651,"output_embedded_package_id":"1CEEXs5EibGLoL5POzqySL61Oani1KqSB"},"outputId":"b0fd1b8b-2ab5-4cb0-febc-71ad7b84c0aa","executionInfo":{"status":"error","timestamp":1548595353319,"user_tz":-330,"elapsed":252119,"user":{"displayName":"Aditya Mehndiratta","photoUrl":"","userId":"12950168247688068496"}}},"cell_type":"code","source":["gan.train(batch_size=128, epochs=30)"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"metadata":{"id":"7Hy3iTViZqyT","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}